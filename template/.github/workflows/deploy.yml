name: Deploy to VPS

on:
  push:
    branches: [ main ]

env:
  APP_NAME: ${{ github.event.repository.name }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create app directory
      uses: appleboy/ssh-action@v1
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        password: ${{ secrets.VPS_PASSWORD }}
        script: mkdir -p /apps/${{ env.APP_NAME }}

    - name: Clear existing files
      uses: appleboy/ssh-action@v1
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        password: ${{ secrets.VPS_PASSWORD }}
        script: rm -rf /apps/${{ env.APP_NAME }}/{*,.[!.]*,..?*}

    - name: Copy files to VPS
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        password: ${{ secrets.VPS_PASSWORD }}
        source: "./"
        target: "/apps/${{ env.APP_NAME }}"
        overwrite: true

    - name: Create .env file
      uses: appleboy/ssh-action@v1
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        password: ${{ secrets.VPS_PASSWORD }}
        envs: APP_NAME,APP_DOMAIN,APP_PORT,COMMIT_SHA
        script: |
          cd /apps/$APP_NAME
          : > .env
          echo "NODE_ENV=production" >> .env
          echo "APP_NAME=$APP_NAME" >> .env
          echo "APP_DOMAIN=$APP_DOMAIN" >> .env
          echo "APP_PORT=$APP_PORT" >> .env
          echo "COMMIT_SHA=$COMMIT_SHA" >> .env
      env:
        APP_NAME: ${{ env.APP_NAME }}
        APP_DOMAIN: ${{ vars.APP_DOMAIN }}
        APP_PORT: ${{ vars.APP_PORT }}
        COMMIT_SHA: ${{ github.sha }}

    - name: Build and deploy
      uses: appleboy/ssh-action@v1
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        password: ${{ secrets.VPS_PASSWORD }}
        envs: APP_NAME,COMMIT_SHA
        script: |
          cd /apps/$APP_NAME
          docker compose build --pull --build-arg COMMIT_SHA=$COMMIT_SHA
          docker compose up -d --force-recreate
      env:
        APP_NAME: ${{ env.APP_NAME }}
        COMMIT_SHA: ${{ github.sha }}

    - name: Wait for health check
      uses: appleboy/ssh-action@v1
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        password: ${{ secrets.VPS_PASSWORD }}
        envs: APP_NAME
        script: |
          cd /apps/$APP_NAME
          echo "Waiting for service to be healthy..."
          for i in {1..30}; do
            if docker compose ps | grep -q "healthy"; then
              echo "Service is healthy!"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "Service failed to become healthy"
              docker compose logs
              exit 1
            fi
            sleep 2
          done
      env:
        APP_NAME: ${{ env.APP_NAME }}

    - name: Cleanup old images
      uses: appleboy/ssh-action@v1
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        password: ${{ secrets.VPS_PASSWORD }}
        script: docker image prune -f --filter "until=24h"


