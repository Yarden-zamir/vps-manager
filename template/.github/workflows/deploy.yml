name: Deploy to VPS

on:
  push:
    branches: [ main ]

env:
  APP_NAME: ${{ github.event.repository.name }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to VPS
      env:
        VPS_HOST: ${{ secrets.VPS_HOST }}
        VPS_USER: ${{ secrets.VPS_USER }}
        VPS_PASSWORD: ${{ secrets.VPS_PASSWORD }}
        APP_DOMAIN: ${{ vars.APP_DOMAIN }}
        APP_PORT: ${{ vars.APP_PORT }}
      run: |
        # Install sshpass for password authentication
        sudo apt-get update && sudo apt-get install -y sshpass
        
        # Add host to known hosts
        mkdir -p ~/.ssh
        ssh-keyscan -H $VPS_HOST >> ~/.ssh/known_hosts
        
        # Create app directory on VPS
        sshpass -p "$VPS_PASSWORD" ssh $VPS_USER@$VPS_HOST "mkdir -p /apps/$APP_NAME"
        
        # Clear existing files (non-atomic deploy)
        sshpass -p "$VPS_PASSWORD" ssh $VPS_USER@$VPS_HOST "rm -rf /apps/$APP_NAME/*"
        
        # Copy files to VPS
        sshpass -p "$VPS_PASSWORD" scp -r ./* $VPS_USER@$VPS_HOST:/apps/$APP_NAME/
        
        # Create .env file with production secrets
        sshpass -p "$VPS_PASSWORD" ssh $VPS_USER@$VPS_HOST << 'ENDSSH'
        cd /apps/$APP_NAME
        
        cat > .env << EOF
        NODE_ENV=production
        APP_NAME=${{ env.APP_NAME }}
        APP_DOMAIN=${{ vars.APP_DOMAIN }}
        APP_PORT=${{ vars.APP_PORT }}
        COMMIT_SHA=${{ github.sha }}
        EOF
        
        # Build and deploy
        docker compose build --pull --build-arg COMMIT_SHA=${{ github.sha }}
        docker compose up -d --force-recreate
        
        # Wait for health check
        echo "Waiting for service to be healthy..."
        for i in {1..30}; do
          if docker compose ps | grep -q "healthy"; then
            echo "Service is healthy!"
            break
          fi
          if [ $i -eq 30 ]; then
            echo "Service failed to become healthy"
            docker compose logs
            exit 1
          fi
          sleep 2
        done
        
        # Cleanup old images
        docker image prune -f --filter "until=24h"
        ENDSSH


